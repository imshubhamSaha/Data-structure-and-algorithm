/**
 * @param {number[]} nums
 * @return {number[]}
 */
function merge(arr, si, mid, ei) {
    const merged = new Array(ei - si + 1);
    let idx1 = si;
    let idx2 = mid + 1;
    let k = 0;
    while (idx1 <= mid && idx2 <= ei) {
        if (arr[idx1] <= arr[idx2]) {
        merged[k++] = arr[idx1++];
        } else {
        merged[k++] = arr[idx2++];
        }
    }

    while (idx1 <= mid) {
        merged[k++] = arr[idx1++];
    }
    while (idx2 <= ei) {
        merged[k++] = arr[idx2++];
    }

    for (let i = 0, j = si; i < merged.length; i++, j++) {
        arr[j] = merged[i];
    }
}

function mergeSort(arr, si, ei) {
    if (si >= ei) {
        return;
    }

    let mid = Math.floor(si + (ei - si) / 2);
    mergeSort(arr, si, mid);
    mergeSort(arr, mid + 1, ei);
    merge(arr, si, mid, ei);
}


var sortArray = function(nums) {
    mergeSort(nums,0,nums.length-1);
    return nums;
};
