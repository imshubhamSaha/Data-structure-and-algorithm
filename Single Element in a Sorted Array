// Binary search Technique
T.C -> O(log n) 

/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
    if (nums.length < 1) return nums;
    
    let low = 0;
    let high = nums.length;
    while (low <= high) {
        let mid =Math.floor(low +(high-low)/2);
        if (nums[mid] !== nums[mid + 1] && nums[mid] !== nums[mid - 1]) return nums[mid];
        else{
            if((mid%2 == 0 && nums[mid] == nums[mid+1]) || (mid%2 !== 0 && nums[mid] != nums[mid + 1])) low = mid + 1;
            else high = mid - 1;
        }
    } 
};    


// Using Xor (Bit Manipulation)
T.C -> O(n)

/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
    let xor = 0;
    for(let i=0; i<nums.length; i++){
        xor ^=nums[i]
    }

    return xor
};
